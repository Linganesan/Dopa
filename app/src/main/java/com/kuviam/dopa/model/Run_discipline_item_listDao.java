package com.kuviam.dopa.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.kuviam.dopa.model.Run_discipline_item_list;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RUN_DISCIPLINE_ITEM_LIST".
*/
public class Run_discipline_item_listDao extends AbstractDao<Run_discipline_item_list, Long> {

    public static final String TABLENAME = "RUN_DISCIPLINE_ITEM_LIST";

    /**
     * Properties of entity Run_discipline_item_list.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Discipline_item = new Property(1, long.class, "discipline_item", false, "DISCIPLINE_ITEM");
        public final static Property Recall_attempt = new Property(2, Integer.class, "recall_attempt", false, "RECALL_ATTEMPT");
        public final static Property Practice_attempt = new Property(3, Integer.class, "practice_attempt", false, "PRACTICE_ATTEMPT");
        public final static Property RunId = new Property(4, long.class, "runId", false, "RUN_ID");
        public final static Property Status = new Property(5, Boolean.class, "Status", false, "STATUS");
        public final static Property Practice_time = new Property(6, Long.class, "practice_time", false, "PRACTICE_TIME");
        public final static Property Recall_time = new Property(7, Long.class, "recall_time", false, "RECALL_TIME");
    };

    private Query<Run_discipline_item_list> run_Run_discipline_item_listListQuery;

    public Run_discipline_item_listDao(DaoConfig config) {
        super(config);
    }
    
    public Run_discipline_item_listDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RUN_DISCIPLINE_ITEM_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DISCIPLINE_ITEM\" INTEGER NOT NULL ," + // 1: discipline_item
                "\"RECALL_ATTEMPT\" INTEGER," + // 2: recall_attempt
                "\"PRACTICE_ATTEMPT\" INTEGER," + // 3: practice_attempt
                "\"RUN_ID\" INTEGER NOT NULL ," + // 4: runId
                "\"STATUS\" INTEGER," + // 5: Status
                "\"PRACTICE_TIME\" INTEGER," + // 6: practice_time
                "\"RECALL_TIME\" INTEGER);"); // 7: recall_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RUN_DISCIPLINE_ITEM_LIST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Run_discipline_item_list entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDiscipline_item());
 
        Integer recall_attempt = entity.getRecall_attempt();
        if (recall_attempt != null) {
            stmt.bindLong(3, recall_attempt);
        }
 
        Integer practice_attempt = entity.getPractice_attempt();
        if (practice_attempt != null) {
            stmt.bindLong(4, practice_attempt);
        }
        stmt.bindLong(5, entity.getRunId());
 
        Boolean Status = entity.getStatus();
        if (Status != null) {
            stmt.bindLong(6, Status ? 1L: 0L);
        }
 
        Long practice_time = entity.getPractice_time();
        if (practice_time != null) {
            stmt.bindLong(7, practice_time);
        }
 
        Long recall_time = entity.getRecall_time();
        if (recall_time != null) {
            stmt.bindLong(8, recall_time);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Run_discipline_item_list readEntity(Cursor cursor, int offset) {
        Run_discipline_item_list entity = new Run_discipline_item_list( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // discipline_item
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // recall_attempt
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // practice_attempt
            cursor.getLong(offset + 4), // runId
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // Status
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // practice_time
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // recall_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Run_discipline_item_list entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDiscipline_item(cursor.getLong(offset + 1));
        entity.setRecall_attempt(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPractice_attempt(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setRunId(cursor.getLong(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setPractice_time(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setRecall_time(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Run_discipline_item_list entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Run_discipline_item_list entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "run_discipline_item_listList" to-many relationship of Run. */
    public List<Run_discipline_item_list> _queryRun_Run_discipline_item_listList(long runId) {
        synchronized (this) {
            if (run_Run_discipline_item_listListQuery == null) {
                QueryBuilder<Run_discipline_item_list> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RunId.eq(null));
                run_Run_discipline_item_listListQuery = queryBuilder.build();
            }
        }
        Query<Run_discipline_item_list> query = run_Run_discipline_item_listListQuery.forCurrentThread();
        query.setParameter(0, runId);
        return query.list();
    }

}
