package com.kuviam.dopa.model;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.kuviam.dopa.model.LocusDao;
import com.kuviam.dopa.model.Locus_text_listDao;
import com.kuviam.dopa.model.Locus_image_listDao;
import com.kuviam.dopa.model.Locus_sound_listDao;
import com.kuviam.dopa.model.Locus_number_listDao;
import com.kuviam.dopa.model.DisciplineDao;
import com.kuviam.dopa.model.Discipline_text_listDao;
import com.kuviam.dopa.model.Discipline_image_listDao;
import com.kuviam.dopa.model.Discipline_sound_listDao;
import com.kuviam.dopa.model.Discipline_number_listDao;
import com.kuviam.dopa.model.RunDao;
import com.kuviam.dopa.model.Run_discipline_item_listDao;
import com.kuviam.dopa.model.DictionaryDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        LocusDao.createTable(db, ifNotExists);
        Locus_text_listDao.createTable(db, ifNotExists);
        Locus_image_listDao.createTable(db, ifNotExists);
        Locus_sound_listDao.createTable(db, ifNotExists);
        Locus_number_listDao.createTable(db, ifNotExists);
        DisciplineDao.createTable(db, ifNotExists);
        Discipline_text_listDao.createTable(db, ifNotExists);
        Discipline_image_listDao.createTable(db, ifNotExists);
        Discipline_sound_listDao.createTable(db, ifNotExists);
        Discipline_number_listDao.createTable(db, ifNotExists);
        RunDao.createTable(db, ifNotExists);
        Run_discipline_item_listDao.createTable(db, ifNotExists);
        DictionaryDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        LocusDao.dropTable(db, ifExists);
        Locus_text_listDao.dropTable(db, ifExists);
        Locus_image_listDao.dropTable(db, ifExists);
        Locus_sound_listDao.dropTable(db, ifExists);
        Locus_number_listDao.dropTable(db, ifExists);
        DisciplineDao.dropTable(db, ifExists);
        Discipline_text_listDao.dropTable(db, ifExists);
        Discipline_image_listDao.dropTable(db, ifExists);
        Discipline_sound_listDao.dropTable(db, ifExists);
        Discipline_number_listDao.dropTable(db, ifExists);
        RunDao.dropTable(db, ifExists);
        Run_discipline_item_listDao.dropTable(db, ifExists);
        DictionaryDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(LocusDao.class);
        registerDaoClass(Locus_text_listDao.class);
        registerDaoClass(Locus_image_listDao.class);
        registerDaoClass(Locus_sound_listDao.class);
        registerDaoClass(Locus_number_listDao.class);
        registerDaoClass(DisciplineDao.class);
        registerDaoClass(Discipline_text_listDao.class);
        registerDaoClass(Discipline_image_listDao.class);
        registerDaoClass(Discipline_sound_listDao.class);
        registerDaoClass(Discipline_number_listDao.class);
        registerDaoClass(RunDao.class);
        registerDaoClass(Run_discipline_item_listDao.class);
        registerDaoClass(DictionaryDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
