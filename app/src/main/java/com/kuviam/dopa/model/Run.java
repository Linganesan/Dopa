package com.kuviam.dopa.model;

import java.util.List;
import com.kuviam.dopa.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "RUN".
 */
public class Run {

    private Long id;
    /** Not-null value. */
    private String discipline;
    private String locus;
    private Integer no_of_items;
    private Long practice_time;
    private Long recall_time;
    private Long assigned_practice_time;
    private Long assigned_recall_time;
    private String status;
    private Long per_practice_time;
    private Long per_recall_time;
    private java.util.Date start_timestamp;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RunDao myDao;

    private List<Run_discipline_item_list> run_discipline_item_listList;

    public Run() {
    }

    public Run(Long id) {
        this.id = id;
    }

    public Run(Long id, String discipline, String locus, Integer no_of_items, Long practice_time, Long recall_time, Long assigned_practice_time, Long assigned_recall_time, String status, Long per_practice_time, Long per_recall_time, java.util.Date start_timestamp) {
        this.id = id;
        this.discipline = discipline;
        this.locus = locus;
        this.no_of_items = no_of_items;
        this.practice_time = practice_time;
        this.recall_time = recall_time;
        this.assigned_practice_time = assigned_practice_time;
        this.assigned_recall_time = assigned_recall_time;
        this.status = status;
        this.per_practice_time = per_practice_time;
        this.per_recall_time = per_recall_time;
        this.start_timestamp = start_timestamp;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRunDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getDiscipline() {
        return discipline;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDiscipline(String discipline) {
        this.discipline = discipline;
    }

    public String getLocus() {
        return locus;
    }

    public void setLocus(String locus) {
        this.locus = locus;
    }

    public Integer getNo_of_items() {
        return no_of_items;
    }

    public void setNo_of_items(Integer no_of_items) {
        this.no_of_items = no_of_items;
    }

    public Long getPractice_time() {
        return practice_time;
    }

    public void setPractice_time(Long practice_time) {
        this.practice_time = practice_time;
    }

    public Long getRecall_time() {
        return recall_time;
    }

    public void setRecall_time(Long recall_time) {
        this.recall_time = recall_time;
    }

    public Long getAssigned_practice_time() {
        return assigned_practice_time;
    }

    public void setAssigned_practice_time(Long assigned_practice_time) {
        this.assigned_practice_time = assigned_practice_time;
    }

    public Long getAssigned_recall_time() {
        return assigned_recall_time;
    }

    public void setAssigned_recall_time(Long assigned_recall_time) {
        this.assigned_recall_time = assigned_recall_time;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Long getPer_practice_time() {
        return per_practice_time;
    }

    public void setPer_practice_time(Long per_practice_time) {
        this.per_practice_time = per_practice_time;
    }

    public Long getPer_recall_time() {
        return per_recall_time;
    }

    public void setPer_recall_time(Long per_recall_time) {
        this.per_recall_time = per_recall_time;
    }

    public java.util.Date getStart_timestamp() {
        return start_timestamp;
    }

    public void setStart_timestamp(java.util.Date start_timestamp) {
        this.start_timestamp = start_timestamp;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Run_discipline_item_list> getRun_discipline_item_listList() {
        if (run_discipline_item_listList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Run_discipline_item_listDao targetDao = daoSession.getRun_discipline_item_listDao();
            List<Run_discipline_item_list> run_discipline_item_listListNew = targetDao._queryRun_Run_discipline_item_listList(id);
            synchronized (this) {
                if(run_discipline_item_listList == null) {
                    run_discipline_item_listList = run_discipline_item_listListNew;
                }
            }
        }
        return run_discipline_item_listList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRun_discipline_item_listList() {
        run_discipline_item_listList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
