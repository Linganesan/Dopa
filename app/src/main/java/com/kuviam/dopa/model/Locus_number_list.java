package com.kuviam.dopa.model;

import com.kuviam.dopa.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "LOCUS_NUMBER_LIST".
 */
public class Locus_number_list {

    private Long id;
    private long locusId;
    private long item;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient Locus_number_listDao myDao;

    private Locus locus;
    private Long locus__resolvedKey;


    public Locus_number_list() {
    }

    public Locus_number_list(Long id) {
        this.id = id;
    }

    public Locus_number_list(Long id, long locusId, long item) {
        this.id = id;
        this.locusId = locusId;
        this.item = item;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLocus_number_listDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getLocusId() {
        return locusId;
    }

    public void setLocusId(long locusId) {
        this.locusId = locusId;
    }

    public long getItem() {
        return item;
    }

    public void setItem(long item) {
        this.item = item;
    }

    /** To-one relationship, resolved on first access. */
    public Locus getLocus() {
        long __key = this.locusId;
        if (locus__resolvedKey == null || !locus__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LocusDao targetDao = daoSession.getLocusDao();
            Locus locusNew = targetDao.load(__key);
            synchronized (this) {
                locus = locusNew;
            	locus__resolvedKey = __key;
            }
        }
        return locus;
    }

    public void setLocus(Locus locus) {
        if (locus == null) {
            throw new DaoException("To-one property 'locusId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.locus = locus;
            locusId = locus.getId();
            locus__resolvedKey = locusId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
