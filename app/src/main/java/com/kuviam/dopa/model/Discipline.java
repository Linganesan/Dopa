package com.kuviam.dopa.model;

import java.util.List;
import com.kuviam.dopa.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DISCIPLINE".
 */
public class Discipline {

    private Long id;
    /** Not-null value. */
    private String name;
    private int no_of_items;
    private String creator;
    private Boolean is_Ordered;
    private Long practice_time;
    private Long recall_time;
    private Long per_practice_time;
    private Long per_recall_time;
    private Long runs_to_sync;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DisciplineDao myDao;

    private List<Discipline_text_list> discipline_text_listList;

    public Discipline() {
    }

    public Discipline(Long id) {
        this.id = id;
    }

    public Discipline(Long id, String name, int no_of_items, String creator, Boolean is_Ordered, Long practice_time, Long recall_time, Long per_practice_time, Long per_recall_time, Long runs_to_sync) {
        this.id = id;
        this.name = name;
        this.no_of_items = no_of_items;
        this.creator = creator;
        this.is_Ordered = is_Ordered;
        this.practice_time = practice_time;
        this.recall_time = recall_time;
        this.per_practice_time = per_practice_time;
        this.per_recall_time = per_recall_time;
        this.runs_to_sync = runs_to_sync;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDisciplineDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public int getNo_of_items() {
        return no_of_items;
    }

    public void setNo_of_items(int no_of_items) {
        this.no_of_items = no_of_items;
    }

    public String getCreator() {
        return creator;
    }

    public void setCreator(String creator) {
        this.creator = creator;
    }

    public Boolean getIs_Ordered() {
        return is_Ordered;
    }

    public void setIs_Ordered(Boolean is_Ordered) {
        this.is_Ordered = is_Ordered;
    }

    public Long getPractice_time() {
        return practice_time;
    }

    public void setPractice_time(Long practice_time) {
        this.practice_time = practice_time;
    }

    public Long getRecall_time() {
        return recall_time;
    }

    public void setRecall_time(Long recall_time) {
        this.recall_time = recall_time;
    }

    public Long getPer_practice_time() {
        return per_practice_time;
    }

    public void setPer_practice_time(Long per_practice_time) {
        this.per_practice_time = per_practice_time;
    }

    public Long getPer_recall_time() {
        return per_recall_time;
    }

    public void setPer_recall_time(Long per_recall_time) {
        this.per_recall_time = per_recall_time;
    }

    public Long getRuns_to_sync() {
        return runs_to_sync;
    }

    public void setRuns_to_sync(Long runs_to_sync) {
        this.runs_to_sync = runs_to_sync;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Discipline_text_list> getDiscipline_text_listList() {
        if (discipline_text_listList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Discipline_text_listDao targetDao = daoSession.getDiscipline_text_listDao();
            List<Discipline_text_list> discipline_text_listListNew = targetDao._queryDiscipline_Discipline_text_listList(id);
            synchronized (this) {
                if(discipline_text_listList == null) {
                    discipline_text_listList = discipline_text_listListNew;
                }
            }
        }
        return discipline_text_listList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDiscipline_text_listList() {
        discipline_text_listList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
