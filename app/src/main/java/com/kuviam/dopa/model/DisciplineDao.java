package com.kuviam.dopa.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kuviam.dopa.model.Discipline;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISCIPLINE".
*/
public class DisciplineDao extends AbstractDao<Discipline, Long> {

    public static final String TABLENAME = "DISCIPLINE";

    /**
     * Properties of entity Discipline.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property No_of_items = new Property(2, int.class, "no_of_items", false, "NO_OF_ITEMS");
        public final static Property Creator = new Property(3, String.class, "creator", false, "CREATOR");
        public final static Property Is_Ordered = new Property(4, Boolean.class, "is_Ordered", false, "IS__ORDERED");
        public final static Property Practice_time = new Property(5, Long.class, "practice_time", false, "PRACTICE_TIME");
        public final static Property Recall_time = new Property(6, Long.class, "recall_time", false, "RECALL_TIME");
        public final static Property Per_practice_time = new Property(7, Long.class, "per_practice_time", false, "PER_PRACTICE_TIME");
        public final static Property Per_recall_time = new Property(8, Long.class, "per_recall_time", false, "PER_RECALL_TIME");
        public final static Property Runs_to_sync = new Property(9, Long.class, "runs_to_sync", false, "RUNS_TO_SYNC");
    };

    private DaoSession daoSession;


    public DisciplineDao(DaoConfig config) {
        super(config);
    }
    
    public DisciplineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISCIPLINE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL UNIQUE ," + // 1: name
                "\"NO_OF_ITEMS\" INTEGER NOT NULL ," + // 2: no_of_items
                "\"CREATOR\" TEXT," + // 3: creator
                "\"IS__ORDERED\" INTEGER," + // 4: is_Ordered
                "\"PRACTICE_TIME\" INTEGER," + // 5: practice_time
                "\"RECALL_TIME\" INTEGER," + // 6: recall_time
                "\"PER_PRACTICE_TIME\" INTEGER," + // 7: per_practice_time
                "\"PER_RECALL_TIME\" INTEGER," + // 8: per_recall_time
                "\"RUNS_TO_SYNC\" INTEGER);"); // 9: runs_to_sync
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISCIPLINE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Discipline entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getNo_of_items());
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(4, creator);
        }
 
        Boolean is_Ordered = entity.getIs_Ordered();
        if (is_Ordered != null) {
            stmt.bindLong(5, is_Ordered ? 1L: 0L);
        }
 
        Long practice_time = entity.getPractice_time();
        if (practice_time != null) {
            stmt.bindLong(6, practice_time);
        }
 
        Long recall_time = entity.getRecall_time();
        if (recall_time != null) {
            stmt.bindLong(7, recall_time);
        }
 
        Long per_practice_time = entity.getPer_practice_time();
        if (per_practice_time != null) {
            stmt.bindLong(8, per_practice_time);
        }
 
        Long per_recall_time = entity.getPer_recall_time();
        if (per_recall_time != null) {
            stmt.bindLong(9, per_recall_time);
        }
 
        Long runs_to_sync = entity.getRuns_to_sync();
        if (runs_to_sync != null) {
            stmt.bindLong(10, runs_to_sync);
        }
    }

    @Override
    protected void attachEntity(Discipline entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Discipline readEntity(Cursor cursor, int offset) {
        Discipline entity = new Discipline( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // no_of_items
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // creator
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // is_Ordered
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // practice_time
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // recall_time
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // per_practice_time
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // per_recall_time
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // runs_to_sync
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Discipline entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setNo_of_items(cursor.getInt(offset + 2));
        entity.setCreator(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIs_Ordered(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setPractice_time(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setRecall_time(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setPer_practice_time(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setPer_recall_time(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setRuns_to_sync(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Discipline entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Discipline entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
