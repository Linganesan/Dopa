package com.kuviam.dopa.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.kuviam.dopa.model.Discipline_text_list;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISCIPLINE_TEXT_LIST".
*/
public class Discipline_text_listDao extends AbstractDao<Discipline_text_list, Long> {

    public static final String TABLENAME = "DISCIPLINE_TEXT_LIST";

    /**
     * Properties of entity Discipline_text_list.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DisciplineId = new Property(1, long.class, "disciplineId", false, "DISCIPLINE_ID");
        public final static Property Item = new Property(2, String.class, "item", false, "ITEM");
    };

    private Query<Discipline_text_list> discipline_Discipline_text_listListQuery;

    public Discipline_text_listDao(DaoConfig config) {
        super(config);
    }
    
    public Discipline_text_listDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISCIPLINE_TEXT_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DISCIPLINE_ID\" INTEGER NOT NULL ," + // 1: disciplineId
                "\"ITEM\" TEXT NOT NULL );"); // 2: item
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISCIPLINE_TEXT_LIST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Discipline_text_list entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDisciplineId());
        stmt.bindString(3, entity.getItem());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Discipline_text_list readEntity(Cursor cursor, int offset) {
        Discipline_text_list entity = new Discipline_text_list( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // disciplineId
            cursor.getString(offset + 2) // item
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Discipline_text_list entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDisciplineId(cursor.getLong(offset + 1));
        entity.setItem(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Discipline_text_list entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Discipline_text_list entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "discipline_text_listList" to-many relationship of Discipline. */
    public List<Discipline_text_list> _queryDiscipline_Discipline_text_listList(long disciplineId) {
        synchronized (this) {
            if (discipline_Discipline_text_listListQuery == null) {
                QueryBuilder<Discipline_text_list> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DisciplineId.eq(null));
                discipline_Discipline_text_listListQuery = queryBuilder.build();
            }
        }
        Query<Discipline_text_list> query = discipline_Discipline_text_listListQuery.forCurrentThread();
        query.setParameter(0, disciplineId);
        return query.list();
    }

}
